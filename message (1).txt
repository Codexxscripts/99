
local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()
 
local Window = Library:CreateWindow{
    Title = "99 Night in the Forest",
    SubTitle = "by @Codexxscripts (Only Telegram)",
    TabWidth = 160,
    Size = UDim2.fromOffset(550, 380),
    Acrylic = true, 
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
}
local Tabs = {
    Main = Window:CreateTab{
        Title = "Main",
        Icon = "phosphor-users-bold"
    },

    Esp = Window:CreateTab{
        Title = "Esp",
        Icon = "map-pin"
    },
    Visual = Window:CreateTab{
        Title = "Visuals",
        Icon = "file"
    },

Bring = Window:CreateTab{
        Title = "Bring & Teleport",
        Icon = "Car"
    },
    Settings = Window:CreateTab{
        Title = "Settings",
        Icon = "settings"
    }
}
local Options = Library.Options
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character
local humanoidRootPart
local inventory = player:WaitForChild("Inventory")

local function onCharacterAdded(char)
    character = char
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then
    onCharacterAdded(player.Character)
end

local sack = nil
local function findSack()
    for _, item in pairs(inventory:GetChildren()) do
        if string.find(item.Name, "Sack") then
            return item
        end
    end
    return nil
end

sack = findSack()

inventory.ChildAdded:Connect(function(child)
    if string.find(child.Name, "Sack") then
        sack = child
    end
end)

inventory.ChildRemoved:Connect(function(child)
    if sack and child == sack then
        sack = findSack()
    end
end)

local itemsFolder = workspace:FindFirstChild("Items")
local characters = workspace:FindFirstChild("Characters")
local lastPos = nil
local items = {}
local kids = {}
local name = nil

local function isSackFull()
    if not sack then return true end
    local current = sack:GetAttribute("NumberItems")
    local capacity = sack:GetAttribute("Capacity")
    return current ~= nil and capacity ~= nil and current >= capacity
end

local function store(item)
    if not sack then return end
    local part = item:FindFirstChildWhichIsA("BasePart")
    if part then
        humanoidRootPart.CFrame = part.CFrame
        task.wait(0.2)
        ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestBagStoreItem"):InvokeServer(sack, item)
        task.wait(0.2)
    end
end

local Items = Tabs.Bring:CreateDropdown("ItemsList", {
    Title = "Items List",
    Values = items,
    Multi = false,
    Default = "",
})
Items:OnChanged(function(Value)
    name = Value
end)

local Kids = Tabs.Bring:CreateDropdown("KidsList", {
    Title = "Kids List",
    Values = kids,
    Multi = false,
    Default = "",
})
Kids:OnChanged(function(Value)
    name = Value
end)

local debounce = false
local function updateItemsDropdown()
    if debounce then return end
    debounce = true

    task.delay(0.1, function()
        if not Items then return end

        local uniqueItems = {}
        local addedNames = {}

        for _, itm in pairs(itemsFolder:GetChildren()) do
            if typeof(itm.Name) == "string" and not addedNames[itm.Name] then
                table.insert(uniqueItems, itm.Name)
                addedNames[itm.Name] = true
            end
        end

        items = uniqueItems
        if typeof(Items.SetValues) == "function" then
            pcall(function()
                Items:SetValues(items)
            end)
        end

        debounce = false
    end)
end

local debounce2 = false
local function updateKidsDropdown()
    if debounce2 then return end
    debounce2 = true

    task.delay(0.1, function ()
        if not Kids then return end

        local uniqueKids = {}

        for _, kid in pairs(characters:GetChildren()) do
            if string.find(kid.Name, "Child") then
                table.insert(uniqueKids, kid.Name)
            end
        end

        kids = uniqueKids
        if typeof(Kids.SetValue) == "function" then
            pcall(function ()
                Kids:SetValues(kids)
            end)
        end

        debounce2 = false
    end)
end

updateItemsDropdown()
updateKidsDropdown()

Tabs.Bring:CreateButton{
    Title = "Bring Item",
    Description = "",
    Callback = function()
        lastPos = humanoidRootPart.CFrame
        pcall(function ()
            local all = {}
            for _, obj in pairs(itemsFolder:GetChildren()) do table.insert(all, obj) end
            for _, obj in pairs(characters:GetChildren()) do table.insert(all, obj) end

            for _, item in pairs(all) do
                if isSackFull() then break end
                if item.Name == name then
                    store(item)
                end
            end
        end)
        humanoidRootPart.CFrame = lastPos
    end
}

Tabs.Bring:CreateButton{
    Title = "Teleport to Item",
    Description = "",
    Callback = function()
        local item = itemsFolder:FindFirstChild(name) or characters:FindFirstChild(name)
        if item then
            local part = item:FindFirstChildWhichIsA("BasePart")
            if part then
                humanoidRootPart.CFrame = part.CFrame
            end
        end
    end
}

local campfire = workspace:FindFirstChild("Map"):FindFirstChild("Campground"):FindFirstChild("MainFire")
Tabs.Bring:CreateButton{
    Title = "Teleport to Campfire",
    Description = "",
    Callback = function()
        if campfire then
            local center = campfire:FindFirstChild("Center")
            if center then
                humanoidRootPart.CFrame = center.CFrame * CFrame.new(0, 13, 0)
            end
        end
    end
}



local Main = Tabs.Main:AddSection("Chest")

local AutoOpenChestNearToggle = Tabs.Main:CreateToggle("AutoChestNearby", {Title = "Auto Open Chest", Default = false })

AutoOpenChestNearToggle:OnChanged(function(value)
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    if not _G.AutoChestNearby then
        _G.AutoChestNearby = {running = false}
    end

    local function getPromptsInRange(range)
        local prompts = {}
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA("Model") and string.find(obj.Name, "Item Chest") then
                local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
                if part then
                    local dist = (humanoidRootPart.Position - part.Position).Magnitude
                    if dist <= range then
                        for _, p in ipairs(obj:GetDescendants()) do
                            if p:IsA("ProximityPrompt") then
                                table.insert(prompts, p)
                            end
                        end
                    end
                end
            end
        end
        return prompts
    end

    if value then
        if _G.AutoChestNearby.running then return end
        _G.AutoChestNearby.running = true
        task.spawn(function()
            while _G.AutoChestNearby.running do
                local prompts = getPromptsInRange(chestRange)
                for _, prompt in ipairs(prompts) do
                    fireproximityprompt(prompt, math.huge)
                end
                task.wait(0.5)
            end
        end)
    else
        _G.AutoChestNearby.running = false
    end
end)

Options.AutoChestNearby:SetValue(false)

local Main = Tabs.Main:AddSection("Cooked")
local AutoCookedTeleportToggle = Tabs.Main:CreateToggle("AutoMorsel", {Title = "Auto Cooked (Teleport)", Default = false })

AutoCookedTeleportToggle:OnChanged(function(value)
    if value then
        _G.AutoMorsel = true
        local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local originalPos = hrp and hrp.CFrame
        task.spawn(function()
            while _G.AutoMorsel do
                task.wait()
                for _, m in pairs(workspace:GetDescendants()) do
                    if not _G.AutoMorsel then break end
                    if m:IsA("Model") and m.Name == "Morsel" and m.PrimaryPart then
                        if hrp then
                            hrp.CFrame = m.PrimaryPart.CFrame
                            m:SetPrimaryPartCFrame(CFrame.new(0.5406733155250549, 12.499372482299805, -0.718663215637207))
                            task.wait(0.2)
                        end
                    end
                end
            end
            if hrp and originalPos then
                hrp.CFrame = originalPos
            end
        end)
    else
        _G.AutoMorsel = false
    end
end)

Options.AutoMorsel:SetValue(false)

local AutoCookedBringToggle = Tabs.Main:CreateToggle("BringMorsels", {Title = "Auto Cooked (Bring)", Default = false })

AutoCookedBringToggle:OnChanged(function(value)
    if value then
        _G.BringMorsels = true
        task.spawn(function()
            while _G.BringMorsels do
                task.wait()
                for _, m in pairs(workspace:GetDescendants()) do
                    if not _G.BringMorsels then break end
                    if m:IsA("Model") and m.Name == "Morsel" and m.PrimaryPart then
                        m:SetPrimaryPartCFrame(CFrame.new(-0.5468149185180664, 7.632332801818848, 0.11174965649843216))
                        task.wait(0.2)
                    end
                end
            end
        end)
    else
        _G.BringMorsels = false
    end
end)

Options.BringMorsels:SetValue(false)

local Main = Tabs.Main:AddSection("Camp")
local AutoFireTeleportLogToggle = Tabs.Main:CreateToggle("AutoLog", {Title = "Auto Fire (Teleport)", Default = false })

AutoFireTeleportLogToggle:OnChanged(function(value)
    if value then
        _G.AutoLog = true
        local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local originalPos = hrp and hrp.CFrame
        task.spawn(function()
            while _G.AutoLog do
                task.wait()
                for _, m in pairs(workspace:GetDescendants()) do
                    if not _G.AutoLog then break end
                    if m:IsA("Model") and m.Name == "Log" and m.PrimaryPart then
                        if hrp then
                            hrp.CFrame = m.PrimaryPart.CFrame
                            m:SetPrimaryPartCFrame(CFrame.new(0.5406733155250549, 12.499372482299805, -0.718663215637207))
                            task.wait(0.2)
                        end
                    end
                end
            end
            if hrp and originalPos then
                hrp.CFrame = originalPos
            end
        end)
    else
        _G.AutoLog = false
    end
end)

Options.AutoLog:SetValue(false)
local AutoFireTeleportCoalToggle = Tabs.Main:CreateToggle("AutoCoal", {Title = "Auto Fire (Teleport - Coal)", Default = false })

AutoFireTeleportCoalToggle:OnChanged(function(value)
    if value then
        _G.AutoCoal = true
        local player = game.Players.LocalPlayer
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        local originalPos = hrp and hrp.CFrame
        task.spawn(function()
            while _G.AutoCoal do
                task.wait()
                for _, m in pairs(workspace:GetDescendants()) do
                    if not _G.AutoCoal then break end
                    if m:IsA("Model") and m.Name == "Coal" and m.PrimaryPart then
                        if hrp then
                            hrp.CFrame = m.PrimaryPart.CFrame
                            m:SetPrimaryPartCFrame(CFrame.new(0.5406733155250549, 12.499372482299805, -0.718663215637207))
                            task.wait(0.2)
                        end
                    end
                end
            end
            if hrp and originalPos then
                hrp.CFrame = originalPos
            end
        end)
    else
        _G.AutoCoal = false
    end
end)

Options.AutoCoal:SetValue(false)
local AutoFireBringToggle = Tabs.Main:CreateToggle("BringLogs", {Title = "Auto Fire (Bring)", Default = false })

AutoFireBringToggle:OnChanged(function(value)
    if value then
        _G.BringLogs = true
        task.spawn(function()
            while _G.BringLogs do
                task.wait()
                for _, m in pairs(workspace:GetDescendants()) do
                    if not _G.BringLogs then break end
                    if m:IsA("Model") and m.Name == "Log" and m.PrimaryPart then
                        m:SetPrimaryPartCFrame(CFrame.new(-0.5468149185180664, 7.632332801818848, 0.11174965649843216))
                        task.wait(0.2)
                    end
                end
            end
        end)
    else
        _G.BringLogs = false
    end
end)

Options.BringLogs:SetValue(false)

local Main = Tabs.Visual:AddSection("Fly Up")

local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local player = game.Players.LocalPlayer

local flyUpLoop = false
local flyUpNightLoop = false
local connAllTime
local connNightOnly

local FlyUpAllTimeToggle = Tabs.Visual:CreateToggle("FlyUpAllTime", {Title = "Fly Up (All Time)", Default = false })

FlyUpAllTimeToggle:OnChanged(function(value)
    local character = player.Character
    if not character then return end
    local hrp = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end

    flyUpLoop = value
    humanoid.PlatformStand = value

    if value then
        local ray = Ray.new(hrp.Position, Vector3.new(0, -1000, 0))
        local part, pos = workspace:FindPartOnRay(ray, hrp.Parent)
        local targetY = (part and pos.Y or hrp.Position.Y) + 30
        connAllTime = RunService.Heartbeat:Connect(function()
            if not flyUpLoop or not hrp.Parent then return end
            hrp.Velocity = Vector3.new(0, 0, 0)
            hrp.CFrame = CFrame.new(hrp.Position.X, targetY, hrp.Position.Z)
        end)
    else
        if connAllTime then connAllTime:Disconnect() end
    end
end)

Options.FlyUpAllTime:SetValue(false)

local FlyUpNightOnlyToggle = Tabs.Visual:CreateToggle("FlyUpNightOnly", {Title = "Fly Up (Night Only)", Default = false })

FlyUpNightOnlyToggle:OnChanged(function(value)
    local character = player.Character
    if not character then return end
    local hrp = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end

    flyUpNightLoop = value

    if value then
        local currentTime = Lighting.ClockTime
        if currentTime >= 18 or currentTime < 6 then
            humanoid.PlatformStand = true
            local ray = Ray.new(hrp.Position, Vector3.new(0, -1000, 0))
            local part, pos = workspace:FindPartOnRay(ray, hrp.Parent)
            local targetY = (part and pos.Y or hrp.Position.Y) + 30
            connNightOnly = RunService.Heartbeat:Connect(function()
                if not flyUpNightLoop or not hrp.Parent then return end
                local t = Lighting.ClockTime
                if t >= 18 or t < 6 then
                    hrp.Velocity = Vector3.new(0, 0, 0)
                    hrp.CFrame = CFrame.new(hrp.Position.X, targetY, hrp.Position.Z)
                end
            end)
        else
            FlyUpNightOnlyToggle:SetValue(false)
        end
    else
        if connNightOnly then connNightOnly:Disconnect() end
        humanoid.PlatformStand = false
    end
end)

Options.FlyUpNightOnly:SetValue(false)
local Main = Tabs.Visual:AddSection("Visual")

Tabs.Visual:CreateButton{
    Title = "Through Wall",
    Description = "",
    Callback = function()
        local Players = game:GetService("Players")
        local Workspace = game:GetService("Workspace")
        local RunService = game:GetService("RunService")

        local LocalPlayer = Players.LocalPlayer
        if not LocalPlayer then return end

        local Character = LocalPlayer.Character
        if not Character then
            Character = LocalPlayer.CharacterAdded:Wait()
        end

        local RootPart = Character:FindFirstChild("HumanoidRootPart")
        if not RootPart then return end

        local CurrentPosition = RootPart.Position
        local CurrentCFrame = RootPart.CFrame
        local FacingDirection = CurrentCFrame.LookVector

        local DashMagnitude = 30
        local DashOffset = Vector3.new(0, 1.25, 0)
        local DashVector = FacingDirection * DashMagnitude
        local Destination = CurrentPosition + DashVector + DashOffset

        local BodyPosition = Instance.new("BodyPosition")
        BodyPosition.MaxForce = Vector3.new(1e9, 1e9, 1e9)
        BodyPosition.P = 1e5
        BodyPosition.D = 2000
        BodyPosition.Position = Destination
        BodyPosition.Parent = RootPart

        local DashDuration = 0.2
        local Connection = nil
        local StartTime = tick()

        Connection = RunService.RenderStepped:Connect(function()
            if tick() - StartTime >= DashDuration then
                BodyPosition:Destroy()
                if Connection then
                    Connection:Disconnect()
                end
            end
        end)
    end
}

local InfinityJumpToggle = Tabs.Main:CreateToggle("InfinityJump", {Title = "Infinity Jump", Default = false})

InfinityJumpToggle:OnChanged(function(value)
    if _G.infinityJumpConn then
        _G.infinityJumpConn:Disconnect()
        _G.infinityJumpConn = nil
    end

    if value then
        _G.infinityJumpConn = game:GetService("UserInputService").JumpRequest:Connect(function()
            local player = game.Players.LocalPlayer
            if player and player.Character then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end)
    end
end)

Options.InfinityJump:SetValue(false)
local Main = Tabs.Main:AddSection("Speed")

local Slider = Tabs.Main:AddSlider("Walk Speed", {
        Title = "Walk Speed",
        Description = "Change speed Player",
        Default = 16,
        Min = 16,
        Max = 1000,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
    })

local Slider = Tabs.Main:AddSlider("Jump Power", {
        Title = "Jump Power",
        Description = "Change jump Player",
        Default = 50,
        Min = 50,
        Max = 1000,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
       end
    })

local SpeedBoostToggle = Tabs.Visual:CreateToggle("SpeedBoost", {Title = "Speed Boost", Default = false})

SpeedBoostToggle:OnChanged(function(Value)
    _G.Speed100 = Value

    local player = game:GetService("Players").LocalPlayer
    if not player then return end

    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    if _G.Speed100 then
        humanoid.WalkSpeed = 100
    else
        humanoid.WalkSpeed = 16
    end
end)

Options.SpeedBoost:SetValue(false)

Tabs.Esp:AddButton({
        Title = "Esp Players",
        Description = "",
        Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/mATc4V53"))()
end})

Tabs.Esp:AddButton({
        Title = "ESP Mob",
        Description = "",
        Callback = function()


-- More scripts: codexxscripts
local function applyHighlight(item)
    if item:IsA("Humanoid") then
        local highlight = Instance.new("Highlight")
        local parent = item.Parent
        if parent then
            local plr = game.Players:GetPlayerFromCharacter(parent)
            if not plr then
                highlight.Parent = parent
            end
        end
    end
end

for _, item in pairs(workspace:GetDescendants()) do
    applyHighlight(item)
end

workspace.DescendantAdded:Connect(applyHighlight)

-- Go to my Telegram!
end})

local LogESP = Tabs.Esp:CreateToggle("LogESP", {Title = "ESP Log", Default = false})
LogESP:OnChanged(function()
    if LogESP.Value then
        for i, model in pairs(workspace:GetDescendants()) do
            if model:IsA("Model") and model.Name == "Log" and model:FindFirstChild("Humanoid") and model:FindFirstChild("HumanoidRootPart") then
                local hrp = model.HumanoidRootPart
                local humanoid = model.Humanoid

                local billboard = Instance.new("BillboardGui")
                billboard.Adornee = hrp
                billboard.AlwaysOnTop = true
                billboard.Size = UDim2.new(0,120,0,50)
                billboard.MaxDistance = math.huge
                billboard.StudsOffset = Vector3.new(0,2,0)
                billboard.Parent = game.CoreGui

                local frame = Instance.new("Frame")
                frame.Size = UDim2.new(1,0,0,5)
                frame.Position = UDim2.new(0,0,1,0)
                frame.BackgroundColor3 = Color3.new(0,1,0)
                frame.BorderSizePixel = 0
                frame.Parent = billboard

                local textLabel = Instance.new("TextLabel")
                textLabel.Text = model.Name
                textLabel.Size = UDim2.new(1,0,1,0)
                textLabel.BackgroundTransparency = 1
                textLabel.TextColor3 = Color3.new(1,0,0)
                textLabel.TextScaled = true
                textLabel.Parent = billboard

                game:GetService("RunService").RenderStepped:Connect(function()
                    if humanoid.Health > 0 then
                        frame.Size = UDim2.new(humanoid.Health/humanoid.MaxHealth,0,0,5)
                    else
                        billboard:Destroy()
                    end
                end)
            end
        end
    else
        for _, gui in pairs(game.CoreGui:GetChildren()) do
            if gui:IsA("BillboardGui") then
                gui:Destroy()
            end
        end
    end
end)

Options.LogESP:SetValue(false)
local BoltESP = Tabs.Esp:CreateToggle("BoltESP", {Title = "ESP Bolt", Default = false})
BoltESP:OnChanged(function()
    if BoltESP.Value then
        for i, model in pairs(workspace:GetDescendants()) do
            if model:IsA("Model") and model.Name == "Bolt" and model:FindFirstChild("Humanoid") and model:FindFirstChild("HumanoidRootPart") then
                local hrp = model.HumanoidRootPart
                local humanoid = model.Humanoid

                local billboard = Instance.new("BillboardGui")
                billboard.Adornee = hrp
                billboard.AlwaysOnTop = true
                billboard.Size = UDim2.new(0,120,0,50)
                billboard.MaxDistance = math.huge
                billboard.StudsOffset = Vector3.new(0,2,0)
                billboard.Parent = game.CoreGui

                local frame = Instance.new("Frame")
                frame.Size = UDim2.new(1,0,0,5)
                frame.Position = UDim2.new(0,0,1,0)
                frame.BackgroundColor3 = Color3.new(0,1,0)
                frame.BorderSizePixel = 0
                frame.Parent = billboard

                local textLabel = Instance.new("TextLabel")
                textLabel.Text = model.Name
                textLabel.Size = UDim2.new(1,0,1,0)
                textLabel.BackgroundTransparency = 1
                textLabel.TextColor3 = Color3.new(1,0,0)
                textLabel.TextScaled = true
                textLabel.Parent = billboard

                game:GetService("RunService").RenderStepped:Connect(function()
                    if humanoid.Health > 0 then
                        frame.Size = UDim2.new(humanoid.Health/humanoid.MaxHealth,0,0,5)
                    else
                        billboard:Destroy()
                    end
                end)
            end
        end
    else
        for _, gui in pairs(game.CoreGui:GetChildren()) do
            if gui:IsA("BillboardGui") then
                gui:Destroy()
            end
        end
    end
end)

Options.BoltESP:SetValue(false)
--{ Lưu Conifg }--
SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes{}
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

SaveManager:LoadAutoloadConfig()
















